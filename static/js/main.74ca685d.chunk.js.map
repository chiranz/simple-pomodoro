{"version":3,"sources":["components/Session.js","components/TimeLeft.js","components/Break.js","App.js","index.js"],"names":["Session","sessionLengthInMinutes","setSessionLength","className","id","onClick","previousSessionLength","disabled","TimeLeft","breakLength","sessionLength","useState","currentSessionType","setCurrentSessionType","timeLeft","setTimeLeft","intervalId","setIntervalId","isStarted","formattedTimeLeft","moment","duration","format","trim","useEffect","clearInterval","setInterval","previousTimeLeft","newTimeLeft","Break","setBreakLength","breakLengthInMinutes","previousBreakLength","momentDurationFormatSetup","App","minutes","ReactDOM","render","document","getElementById"],"mappings":"oMAEe,SAASA,EAAT,GAAgE,IAA7CC,EAA4C,EAA5CA,uBAAwBC,EAAoB,EAApBA,iBACxD,OACE,yBAAKC,UAAU,WACb,uBAAGC,GAAG,iBAAN,WACA,yBAAKD,UAAU,WACb,4BACEE,QAAS,kBACPH,GACE,SAAAI,GAAqB,OAAIA,EAAwB,OAGrDC,SAAqC,IAA3BN,GANZ,KAUA,uBAAGG,GAAG,kBAAkBH,GACxB,4BACEI,QAAS,kBACPH,GACE,SAAAI,GAAqB,OAAIA,EAAwB,QAHvD,O,WCZO,SAASE,EAAT,GAAmD,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,cAAiB,EACXC,mBAAS,WADE,mBACxDC,EADwD,KACpCC,EADoC,OAE/BF,mBAASD,GAFsB,mBAExDI,EAFwD,KAE9CC,EAF8C,OAG3BJ,mBAAS,MAHkB,mBAGxDK,EAHwD,KAG5CC,EAH4C,KAIzDC,EAA2B,OAAfF,EACZG,EAAoBC,IACvBC,SAASP,EAAU,KACnBQ,OAAO,QAAS,CAAEC,MAAM,IAC3BC,qBAAU,WACRT,EAAYL,KACX,CAACA,IA2BJ,OACE,yBAAKP,UAAU,WACb,2BAAIgB,GACJ,2BAAIP,GACJ,4BAAQP,QA7BY,WAEtB,GAAIa,EACFO,cAAcT,GACdC,EAAc,UACT,CACL,IAAMD,EAAaU,aAAY,WAC7BX,GAAY,SAAAY,GACV,IAAMC,EAAcD,EAAmB,EACvC,GAAIC,GAAe,EACjB,OAAOA,EAGkB,YAAvBhB,GACFC,EAAsB,SACtBE,EAAYN,KAEZI,EAAsB,WACtBE,EAAYL,SAGf,KACHO,EAAcD,MAOqBE,EAAY,OAAS,UC7C/C,SAASW,EAAT,GAA0D,IAAzCC,EAAwC,EAAxCA,eAAgBC,EAAwB,EAAxBA,qBAC9C,OACE,yBAAK5B,UAAU,WACb,uBAAGC,GAAG,eAAN,SACA,yBAAKD,UAAU,WACb,4BACEE,QAAS,kBACPyB,GAAe,SAAAE,GAAmB,OAAIA,EAAsB,OAE9DzB,SAAmC,IAAzBwB,GAJZ,KAQA,uBAAG3B,GAAG,gBAAgB2B,GAEtB,4BACE1B,QAAS,kBACPyB,GAAe,SAAAE,GAAmB,OAAIA,EAAsB,QAFhE,O,MDbRC,GAA0Bb,KEyBXc,MAtBf,WAAe,MAEyBvB,mBAAS,KAFlC,mBAENF,EAFM,KAEOqB,EAFP,KAGPC,EAAuBX,IAAOC,SAASZ,EAAa,KAAK0B,UAHlD,EAK6BxB,mBAAS,MALtC,mBAKND,EALM,KAKSR,EALT,KAMPD,EAAyBmB,IAAOC,SAASX,EAAe,KAAKyB,UACnE,OACE,yBAAKhC,UAAU,kBACb,kBAACH,EAAD,CACEC,uBAAwBA,EACxBC,iBAAkBA,IAEpB,kBAACM,EAAD,CAAUE,cAAeA,EAAeD,YAAaA,IACrD,kBAACoB,EAAD,CACEE,qBAAsBA,EACtBD,eAAgBA,MCnBxBM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.74ca685d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Session({ sessionLengthInMinutes, setSessionLength }) {\n  return (\n    <div className=\"section\">\n      <p id=\"session-label\">Session</p>\n      <div className=\"control\">\n        <button\n          onClick={() =>\n            setSessionLength(\n              previousSessionLength => previousSessionLength - 60\n            )\n          }\n          disabled={sessionLengthInMinutes === 0}\n        >\n          -\n        </button>\n        <p id=\"session-length\">{sessionLengthInMinutes}</p>\n        <button\n          onClick={() =>\n            setSessionLength(\n              previousSessionLength => previousSessionLength + 60\n            )\n          }\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport momentDurationFormatSetup from \"moment-duration-format\";\n\nmomentDurationFormatSetup(moment);\n\nexport default function TimeLeft({ breakLength, sessionLength }) {\n  const [currentSessionType, setCurrentSessionType] = useState(\"Session\"); // Session or Break\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n  const [intervalId, setIntervalId] = useState(null);\n  const isStarted = intervalId !== null;\n  const formattedTimeLeft = moment\n    .duration(timeLeft, \"s\")\n    .format(\"mm:ss\", { trim: false });\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n  }, [sessionLength]);\n\n  const handleStartStop = () => {\n    //   Decrement time left every one second\n    if (isStarted) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      const intervalId = setInterval(() => {\n        setTimeLeft(previousTimeLeft => {\n          const newTimeLeft = previousTimeLeft - 1;\n          if (newTimeLeft >= 0) {\n            return newTimeLeft;\n          }\n          //   if session\n          if (currentSessionType === \"Session\") {\n            setCurrentSessionType(\"Break\");\n            setTimeLeft(breakLength);\n          } else {\n            setCurrentSessionType(\"Session\");\n            setTimeLeft(sessionLength);\n          }\n        });\n      }, 1000);\n      setIntervalId(intervalId);\n    }\n  };\n  return (\n    <div className=\"section\">\n      <p>{formattedTimeLeft}</p>\n      <p>{currentSessionType}</p>\n      <button onClick={handleStartStop}>{isStarted ? \"Stop\" : \"Start\"}</button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Break({ setBreakLength, breakLengthInMinutes }) {\n  return (\n    <div className=\"section\">\n      <p id=\"break-label\">Break</p>\n      <div className=\"control\">\n        <button\n          onClick={() =>\n            setBreakLength(previousBreakLength => previousBreakLength - 60)\n          }\n          disabled={breakLengthInMinutes === 0}\n        >\n          -\n        </button>\n        <p id=\"break-length\">{breakLengthInMinutes}</p>\n\n        <button\n          onClick={() =>\n            setBreakLength(previousBreakLength => previousBreakLength + 60)\n          }\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./app.style.css\";\nimport moment from \"moment\";\nimport Session from \"./components/Session\";\nimport TimeLeft from \"./components/TimeLeft\";\nimport Break from \"./components/Break\";\n\nfunction App() {\n  // Break Variables\n  const [breakLength, setBreakLength] = useState(300);\n  const breakLengthInMinutes = moment.duration(breakLength, \"s\").minutes();\n  // Session variables\n  const [sessionLength, setSessionLength] = useState(60 * 25);\n  const sessionLengthInMinutes = moment.duration(sessionLength, \"s\").minutes();\n  return (\n    <div className=\"main-container\">\n      <Session\n        sessionLengthInMinutes={sessionLengthInMinutes}\n        setSessionLength={setSessionLength}\n      />\n      <TimeLeft sessionLength={sessionLength} breakLength={breakLength} />\n      <Break\n        breakLengthInMinutes={breakLengthInMinutes}\n        setBreakLength={setBreakLength}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}